{#- macro: render_commit -#}
{% set commit_bodies = [] %}
{%- macro render_commit(commit) -%}
{%- for msg in commit.body -%}
{%- if msg != '' -%}
{%- if msg[0] == '*' -%}
{% set msg = msg[1:]|trim %}
{%- else %}
{% set msg = msg|trim %}
{%- endif %}
{%- if ':' in msg -%}
{% set _ = commit_bodies.append(msg + ' - ' + commit.author_name) %}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
- {{ commit.convention.subject|default(commit.subject) }} ([{{ commit.hash|truncate(7, True, '') }}]({{ commit.url }}) by {{ commit.author_name }}).
{%- if commit.text_refs.issues_not_in_subject %} Related issues/PRs: {% for issue in commit.text_refs.issues_not_in_subject -%}
{% if issue.url %}[{{ issue.ref }}]({{ issue.url }}){% else %}{{ issue.ref }}{% endif %}{% if not loop.last %}, {% endif -%}
{%- endfor -%}{%- endif -%}
{%- for trailer_name, trailer_value in commit.trailers.items() -%}
{%- if trailer_value|is_url %} [{{ trailer_name }}]({{ trailer_value }})
{%- else %} {{ trailer_name }}: {{ trailer_value }}{% endif %}
{%- if not loop.last %},{% endif %}
{%- endfor -%}
{%- endmacro -%}

{#- macro: render_section -#}
{%- macro render_section(section) %}
### {{ section.type or "Misc" }}

{% for commit in section.commits|sort(attribute='author_date',reverse=true)|unique(attribute='subject') -%}
{{ render_commit(commit) }}
{% endfor %}

{%- endmacro -%}

{#- macro: render_version -#}
{%- macro render_version(version) -%}
{%- if version.tag or version.planned_tag %}
## Version [{{ version.tag or version.planned_tag }}]({{ version.url }}){% if version.date %} - {{ version.date }}{% endif %}

<small>[Compare with {{ version.previous_version.tag|default("first commit") }}]({{ version.compare_url }})</small>
{%- else -%}
## Unreleased

<small>[Compare with latest]({{ version.compare_url }})</small>
{%- endif -%}
{% for type in changelog.sections %}
{%- if type in version.sections_dict -%}
{%- with section = version.sections_dict[type] -%}
{{ render_section(section) }}
{%- endwith -%}
{%- endif -%}
{%- endfor -%}
{%- if not (version.tag or version.planned_tag) -%}
<!-- insertion marker -->{% endif %}

{% endmacro -%}

{#- template -#}
{%- if not in_place -%}
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

{%- endif -%}<!-- insertion marker -->
{%- for version in changelog.versions_list -%}
{{ render_version(version) }}
{%- endfor -%}

{# Display concatenated commit bodies at the bottom of the page #}
{%- if commit_bodies -%}
{%- set commit_bodies = commit_bodies|unique -%}
{%- set sorted_commit_bodies = commit_bodies|sort -%}
{%- set commit_data = {} -%}
{%- for body in sorted_commit_bodies -%}
{%- if not body.startswith('Merge branch') and not body.startswith('Approved-by') -%}
{%- set split_body = body.split(':', 1) -%}
{%- if split_body|length >= 2 -%}
{%- set key = split_body[0]|trim -%}
{%- set value = split_body[1]|trim -%}
{%- if commit_data[key] is not defined -%}
{%- set _ = commit_data.update({key: []}) -%}
{%- endif -%}
{%- set _ = commit_data[key].append(value) -%}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
## Commit Data
{% for key, values in commit_data.items() %}
### {{ key }}
{% for value in values %}
- {{ value|trim }}
{% endfor %}
{% endfor %}
{%- endif %}
